import React, { useState } from 'react';
import axios from 'axios';

const App = () => {
  const [audioFile, setAudioFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const [progressText, setProgressText] = useState('');
  const [transcription, setTranscription] = useState('');
  const [rawTranscription, setRawTranscription] = useState('');
  const [sentences, setSentences] = useState([]);

  const handleFileChange = (e) => {
    setAudioFile(e.target.files[0]);
  };

  const handleUpload = async () => {
    if (!audioFile) return alert('Please select an audio file');
    const durationInSeconds = Math.round(audioFile.size / 16000); // Approximation
    const estimatedTime = Math.min(durationInSeconds * 0.1, 20); // Cap at 20 sec

    const formData = new FormData();
    formData.append('audio', audioFile);

    setLoading(true);
    setProgressText(`‚è≥ Estimated processing time: ${Math.round(estimatedTime)} sec...`);

    try {
      const response = await axios.post('http://localhost:5000/analyze', formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });

      const data = response.data;
      setRawTranscription(data.raw_transcription);
      setTranscription(data.transcription);
      setSentences(data.sentences);
    } catch (error) {
      alert('Error occurred during upload: ' + error.message);
    } finally {
      setLoading(false);
      setProgressText('');
    }
  };

  const styles = {
    container: {
      maxWidth: 600,
      margin: 'auto',
      padding: 20,
      fontFamily: 'Arial',
    },
    input: {
      margin: '10px 0',
      width: '100%',
    },
    button: {
      padding: '10px 20px',
      backgroundColor: '#4CAF50',
      color: 'white',
      border: 'none',
      borderRadius: 5,
      cursor: 'pointer',
      width: '100%',
    },
    feedbackBox: {
      border: '1px solid #ccc',
      borderRadius: 5,
      padding: 10,
      margin: '10px 0',
      backgroundColor: '#f9f9f9',
    },
    sectionTitle: {
      fontSize: '1.2em',
      marginTop: 20,
      color: '#333',
    },
    progress: {
      marginTop: 15,
      color: '#888',
      fontStyle: 'italic',
    },
  };

  return (
    <div style={styles.container}>
      <h2>üß† Smart Transcription & Feedback App</h2>

      <input type="file" accept="audio/*" onChange={handleFileChange} style={styles.input} />
      <button onClick={handleUpload} style={styles.button}>
        Upload & Analyze
      </button>

      {loading && <p style={styles.progress}>{progressText || 'Loading...'}</p>}

      {!loading && transcription && (
        <>
          <h3 style={styles.sectionTitle}>üó£ Raw Transcription</h3>
          <p>{rawTranscription}</p>

          <h3 style={styles.sectionTitle}>üìù Clean Transcription</h3>
          <p>{transcription}</p>

          <h3 style={styles.sectionTitle}>üîç Sentence Feedback</h3>
          {sentences.length > 0 &&
            sentences.map((s, idx) => (
              <div key={idx} style={styles.feedbackBox}>
                <p><strong>Original:</strong> {s.original}</p>
                <p><strong>Corrected:</strong> {s.corrected}</p>
                <ul>
                  {s.issues.length > 0 ? (
                    s.issues.map((issue, i) => (
                      <li key={i}>
                        {issue.message}
                        {issue.replacements.length > 0 &&
                          ` (Suggestion: ${issue.replacements.join(', ')})`}
                      </li>
                    ))
                  ) : (
                    <li>No issues found</li>
                  )}
                </ul>
              </div>
            ))}
        </>
      )}
    </div>
  );
};

export default App;